{"version":3,"sources":["spinner/spinner.js","uploadeComponent/modalComponent/modal.js","chart/chart.js","uploadeComponent/upload.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","className","Modal","setAppElement","customStyle","overlay","backgroundColor","zIndex","content","top","left","right","bottom","border","background","overflow","borderadius","outline","padding","UploadModal","props","useState","stateModal","setstateModal","htmlFind","sethtmlFind","iframeClass","setiframeClass","loading","setloading","iframeRef","style","isOpen","shouldCloseOnOverlayClick","onRequestClose","close","ref","iframe","src","children","href","imgSrc","render","title","allowFullScreen","allowpaymentrequest","transform","onLoad","contentWindow","document","querySelector","onClick","MyResponsiveBar","data","keys","Object","indexBy","margin","minValue","innerPadding","groupMode","colors","scheme","borderWidth","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","animate","motionStiffness","motionDamping","Uploader","state","csvCollection","singleImageSource","filesPerPage","currentPageNo","topList","currentPost","chart","highlighCode","handleOnDrop","setState","pageNumberHandler","remainData","slice","indexOfFirstFile","indexOfLastFile","renderTableBodyData","map","index","key","bodyValues","parse","renderTableHeadData","head","topRows","every","dat","test","innerData","indes","uuidv4","e","preventDefault","assign","openModal","handleOnError","err","file","inputElem","reason","console","log","handleOnRemoveFile","closeModal","paginationHanlder","page","pageSize","chartDataFunctionality","chardHanler","allowedField","filterChart","val","ind","indexOf","chartCheck","dataCheck","filteredChartData","filterCharData","Row","undefined","object","obj","values","v","isNaN","dataTitle","parseFloat","prevProps","prevState","this","chartClass","codeHighLightClass","onDrop","onError","addRemoveButton","onRemoveFile","total","length","showTotal","range","defaultPageSize","defaultCurrent","pageSizeOptions","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.54c877ff.chunk.js","sourcesContent":["import React from 'react';\nimport './spinner.css'\n\nfunction Spinner() {\n    return (\n        <div className=\"spinner\">\n            \n        </div>\n    )\n}\n\nexport default Spinner\n","import React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport './modal.css';\nimport Spinner from '../../spinner/spinner'\nModal.setAppElement(\"#root\");\n\nconst customStyle = {\n    overlay: {\n        backgroundColor: 'gray',\n        zIndex: 100,\n\n    },\n    content: {\n        top: \"10%\",\n        left: \"40px\",\n        right: \"40px\",\n        bottom: \"50px\",\n        border: \"1px solid rgb(204, 204, 204)\",\n        background: \"rgb(255, 255, 255)\",\n        overflow: \"hidden\",\n        borderadius: \"4px\",\n        outline: \"none\",\n        padding: \"20px\",\n    }\n\n}\n\nconst UploadModal = (props) => {\n    const [stateModal, setstateModal] = useState(true);\n    const [htmlFind, sethtmlFind] = useState(false)\n    const [iframeClass, setiframeClass] = useState('');\n    const [loading, setloading] = useState(true)\n\n    let iframeRef = null;\n\n\n    const render = () => {\n        if (props.children && props.children['href']) {\n            let { href } = props.children;\n            if (!htmlFind) {\n                sethtmlFind(true)\n                if (href === 'results/Zip.html') {\n                    setiframeClass('map')\n                } else {\n                    setiframeClass('html');\n                }\n            }\n            return href;\n        }\n        let imgSrc = props.children.src;\n        if (props.children && imgSrc) {\n            if (!htmlFind) {\n                sethtmlFind(true);\n                setiframeClass('img');\n            }\n            return imgSrc;\n\n        }\n    }\n    let styleFunction = () => {\n        let iframeBody = iframeRef.contentWindow.document.querySelector('body');\n        iframeBody.className = 'body';\n        setloading(false)\n    }\n\n    return (\n        <>\n            <Modal style={customStyle} isOpen={stateModal} shouldCloseOnOverlayClick onRequestClose={() => { setstateModal(false); props.close() }}>\n                <div className='childContent'>\n                    <iframe\n                        ref={(iframe) => iframeRef = iframe}\n                        src={render()}\n                        title=\"Detailed View\"\n                        className={iframeClass}\n                        allowFullScreen={true}\n                        allowpaymentrequest={\"true\"}\n                        style={{ transform: \"scale(1)\" }}\n                        onLoad={styleFunction}\n                    > </iframe>\n                    {loading ? <Spinner /> : ''}\n\n                </div>\n                <button className={\"buttonClose\"} onClick={() => { setstateModal(false); props.close() }}>x</button>\n            </Modal>\n        </>\n    )\n};\nexport default UploadModal;\n\n\n","import React from 'react';\nimport { ResponsiveBar } from '@nivo/bar'\nimport './chart.css'\n// make sure parent container have a defined height when using\n// responsive component, otherwise height will be 0 and\n// no chart will be rendered.\n// website examples showcase many properties,\n// you'll often use just a few of them.\nconst MyResponsiveBar = (props) => {\n    // console.log(props.data, 'props data',Object.keys(props.data[0]))\n    return (\n        <div className='chart'>\n           \n            <ResponsiveBar\n                data={props.data}\n                keys={Object.keys(props.data[0])}\n                indexBy=\"Row\"\n                margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\n                minValue={-100}\n                padding={0}\n                innerPadding={0}\n                groupMode=\"grouped\"\n                colors={{ scheme: 'nivo' }}\n                borderWidth={1}\n\n                \n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                axisTop={null}\n                axisRight={null}\n                axisBottom={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n                    legend: 'Row',\n                    legendPosition: 'middle',\n                    legendOffset: 32\n                }}\n                axisLeft={{\n                    tickSize: 5,\n                    tickPadding: 5,\n                    tickRotation: 0,\n\n                    legendPosition: 'middle',\n                    legendOffset: -40\n                }}\n                labelSkipWidth={12}\n                labelSkipHeight={12}\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\n                legends={[\n                    {\n                        dataFrom: 'keys',\n                        anchor: 'bottom-right',\n                        direction: 'column',\n                        justify: false,\n                        translateX: 120,\n                        translateY: 0,\n                        itemsSpacing: 2,\n                        itemWidth: 100,\n                        itemHeight: 20,\n                        itemDirection: 'left-to-right',\n                        itemOpacity: 0.85,\n                        symbolSize: 20,\n                        effects: [\n                            {\n                                on: 'hover',\n                                style: {\n                                    itemOpacity: 1\n                                }\n                            }\n                        ]\n                    }\n                ]}\n                animate={true}\n                motionStiffness={90}\n                motionDamping={15}\n            />\n        </div>\n    )\n}\nexport default MyResponsiveBar;","import React, { Component } from 'react'\nimport { CSVReader } from 'react-papaparse';\nimport './uploader.css';\nimport parse from 'html-react-parser';\nimport Modal from './modalComponent/modal';\nimport { Pagination } from 'antd';\nimport { v4 as uuidv4 } from 'uuid';\nimport MyResponsiveBar from '../chart/chart';\n\n\nexport default class Uploader extends Component {\n    state = {\n        csvCollection: '',\n        singleImageSource: '',\n        filesPerPage: 10,\n        currentPageNo: 1,\n        topList: '',\n        currentPost: '',\n        chart: false,\n        highlighCode: false\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.top !== this.state.topList) {\n            this.renderTableHeadData();\n        }\n\n    }\n\n\n\n    handleOnDrop = (data) => {\n        this.setState({\n            csvCollection: data,\n            loading: ''\n        })\n\n    }\n    //pagenumber and  post per page functionality \n\n    pageNumberHandler = () => {\n        let [...data] = this.state.csvCollection;\n        let remainData;\n        remainData = data.slice(3)\n        if (this.state.topList) {\n            remainData = data.slice(2)\n\n        }\n        let { filesPerPage, currentPageNo } = this.state;\n\n\n        let indexOfFirstFile, indexOfLastFile, currentPost;\n        indexOfLastFile = filesPerPage * currentPageNo;\n        indexOfFirstFile = indexOfLastFile - filesPerPage;\n        currentPost = remainData.slice(indexOfFirstFile, indexOfLastFile)\n        return currentPost\n    }\n\n    //table body data functionality\n\n    renderTableBodyData = () => {\n\n        let currentPost = this.pageNumberHandler()\n\n        //loop through the all incoming data and render the table formats \n        return currentPost.map((data, index) => {\n\n            return (\n                <tr key={`outerBody${index}`}>\n                    {data.data.map((bodyValues, index) => {\n                        if (parse(bodyValues).props && parse(bodyValues).props.children && this.state.highlighCode === false) {\n                            return <td key={`innerBody${index}`} > {(parse(bodyValues).props.children)} </td>\n                        }\n                        if (parse(bodyValues).props && parse(bodyValues).props.children && this.state.highlighCode === true) {\n                            return <td key={`innerBody${index}`} > {parse(bodyValues)} </td>\n                        }\n                        return <td key={`innerBody${index}`} > {(bodyValues)} </td>\n                    })}\n                </tr>\n            )\n        })\n    }\n    // table head data\n    renderTableHeadData = () => {\n        let [...head] = this.state.csvCollection;\n        let topRows = head.slice(0, 3);\n        let determineRows\n        if (topRows && topRows[2] && topRows[2]['data']) {\n            determineRows = topRows[2]['data'];\n            if (!determineRows.every((dat) => (/<\\/?[a-z][\\s\\S]*>/i.test(dat)))) {\n                topRows = head.slice(0, 2)\n                if (!this.state.topList) {\n\n                    this.setState({ topList: true })\n                }\n            }\n        }\n        return topRows.map((data, index) => {\n            return (\n                <tr key={`outerHead${index}`}>\n                    {data.data.map((innerData, indes) => {\n                        if (/<\\/?[a-z][\\s\\S]*>/i.test(innerData)) {\n                            return (\n                                <td\n                                    key={uuidv4()}\n                                    onClick={e => {\n                                        e.preventDefault();\n                                        let { props } = Object.assign({}, parse(innerData));\n                                        this.openModal(props);\n                                    }}\n                                >\n                                    {parse(innerData)}\n                                </td>\n                            );\n                        }\n                        return <td key={uuidv4()}>{innerData}</td>\n                    })}\n                </tr>\n            )\n        })\n\n    }\n\n    //csv file error hadler\n    handleOnError = (err, file, inputElem, reason) => {\n        console.log(err)\n    }\n\n    // csv file remove \n    handleOnRemoveFile = (data) => {\n        console.log(data, 'removed')\n        this.setState({\n            csvCollection: '',\n            topList: false\n\n        })\n    }\n\n    //modal open handler functionality\n    openModal = (openModal) => {\n        if ((openModal && openModal.src) || (openModal && openModal.href)) {\n            this.setState({\n                singleImageSource: openModal\n            })\n        }\n\n    }\n    //modal close fucntionality\n    closeModal = () => {\n        this.setState({\n            singleImageSource: ''\n        })\n    }\n\n    //pagination handler \n    paginationHanlder = (page, pageSize) => {\n        this.setState({\n            filesPerPage: pageSize,\n            currentPageNo: page\n        })\n    }\n\n    //chart data functionality\n    chartDataFunctionality = () => {\n        const title = this.state.csvCollection\n\n        let currentPost = this.pageNumberHandler()\n        let chart = this.chardHanler(currentPost, title);\n\n        let allowedField = [\n            'Term',\n            'NoEmp',\n            'NewExist',\n            'CreateJob',\n            'RetainedJob',\n            'UrbanRural',\n            'DisbursementGross',\n            'BalanceGross',\n            'ChgOffPrinGr',\n            'GrAppv',\n            'SBA_Appv',\n            'daysterm'\n        ]\n        let filterChart = [...chart]\n        filterChart.map((val, ind) => {\n            for (let key in filterChart[ind]) {\n                if (allowedField.indexOf(key) === -1) {\n                    delete filterChart[ind][key];\n                }\n            }\n        })\n        let chartCheck = filterChart[0];\n        let dataCheck = allowedField[0]\n\n        let filteredChartData = filterChart.map((filterCharData, index) => {\n            if (chartCheck[dataCheck]) {\n\n                return { ...filterCharData, Row: `Row ${index + 1}` }\n            }\n            return;\n\n        })\n\n        if (filteredChartData[0] !== undefined) {\n            return <MyResponsiveBar data={filteredChartData} />\n        }\n        return <h2 className='noData'>There is no chart data here</h2>\n\n\n    }\n\n    //table chart handler\n    chardHanler = (data, title) => {\n\n        return data.map((val, index) => {\n\n            let object = Object.assign({}, val.data);\n            let obj = {}\n            let finalValue = Object.values(object).map((v, index) => {\n                if (!isNaN(v) && !undefined && (v < 100000)) {\n                    let dataTitle = title[0]['data'][index];\n                    if ((v >= 3000)) {\n                        let convertOnePer = (v * 0.01);\n                        let values = parseFloat(convertOnePer);\n                        return obj[dataTitle] = values;\n                    }\n                    let values = parseFloat(v)\n                    return obj[dataTitle] = values;\n\n                }\n            });\n\n\n            return obj;\n        })\n    }\n    render() {\n\n        let chartClass = this.state.chart ? 'chartRed' : 'chartGreen';\n        let codeHighLightClass = this.state.highlighCode ? 'DisableHightlight' : 'EnableHighlight';\n        return (<div className='uploader'>\n            <div className='uploaderCard' >\n                <CSVReader\n                    onDrop={this.handleOnDrop}\n                    onError={this.handleOnError}\n                    addRemoveButton\n                    onRemoveFile={this.handleOnRemoveFile}\n                >\n                    <span>Click (Drop) Upload  Your  file</span>\n                </CSVReader>\n            </div>\n            {this.state.csvCollection && <div>\n                <button onClick={() => this.setState({ chart: !this.state.chart })} className={`Btn ${chartClass}`} >\n                    {this.state.chart ? \"Hide Chart\" : \"Show Chart\"}\n                </button>\n                {this.state.chart ? this.chartDataFunctionality() : ''}\n\n            </div>}\n            {this.state.csvCollection && <div className='pagination'>\n                <Pagination\n                    total={this.state.csvCollection.length}\n                    showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\n                    defaultPageSize={10}\n                    defaultCurrent={1}\n                    pageSizeOptions={[\"10\", \"25\", \"50\", \"100\", \"500\"]}\n                    onChange={(page, pageSize) => this.paginationHanlder(page, pageSize)}\n                />\n            </div>}\n            <div className='tableData' key={\"table\"}>\n                {this.state.csvCollection && (\n                    <>\n                        <button onClick={() => this.setState({ highlighCode: !this.state.highlighCode })}\n                            className={`Btn clrbtn ${codeHighLightClass}`}>\n                            {this.state.highlighCode ? 'Disable Hightlight' : \"Hightlight Data\"}\n                        </button>\n\n                        <table className='table'>\n                            <thead key={'theadHead'}>\n                                {this.renderTableHeadData()}\n                            </thead>\n                            <tbody key={\"theadBody\"}>\n                                {this.renderTableBodyData()}\n                            </tbody>\n                        </table>\n                    </>\n                )}\n            </div>\n            {this.state.singleImageSource ? <Modal close={this.closeModal}>{(this.state.singleImageSource)}</Modal> : ''}\n        </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport Uploader from './uploadeComponent/upload'\nimport MyResponsiveBar from './chart/chart'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <MyResponsiveBar /> */}\n      <Uploader />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}