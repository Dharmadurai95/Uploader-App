{"version":3,"sources":["spinner/spinner.js","uploadeComponent/modalComponent/modal.js","chart/chart.js","uploadeComponent/upload.js","App.js","serviceWorker.js","index.js"],"names":["Spinner","className","Modal","setAppElement","customStyle","overlay","backgroundColor","zIndex","content","top","left","right","bottom","border","background","overflow","borderadius","outline","padding","UploadModal","props","useState","stateModal","setstateModal","htmlFind","sethtmlFind","iframeClass","setiframeClass","loading","setloading","iframeRef","style","isOpen","shouldCloseOnOverlayClick","onRequestClose","close","ref","iframe","src","children","href","imgSrc","render","title","allowFullScreen","allowpaymentrequest","transform","onLoad","contentWindow","document","querySelector","onClick","MyResponsiveBar","data","keys","Object","indexBy","margin","minValue","innerPadding","groupMode","colors","scheme","borderWidth","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","animate","motionStiffness","motionDamping","Uploader","state","csvCollection","singleImageSource","filesPerPage","currentPageNo","topList","currentPost","chart","highlighCode","titleName","handleOnDrop","setState","pageNumberHandler","remainData","slice","indexOfFirstFile","indexOfLastFile","renderTableBodyData","map","index","key","bodyValues","parse","renderTableHeadData","head","topRows","every","dat","test","innerData","indes","uuidv4","e","preventDefault","assign","openModal","handleOnError","err","file","inputElem","reason","console","log","handleOnRemoveFile","closeModal","paginationHanlder","page","pageSize","chartDataFunctionality","chardHanler","allowedField","filterChart","val","ind","indexOf","chartCheck","dataCheck","filteredChartData","filterCharData","Row","undefined","object","obj","values","v","isNaN","dataTitle","parseFloat","prevProps","prevState","this","chartClass","codeHighLightClass","onDrop","onError","addRemoveButton","onRemoveFile","total","length","showTotal","range","defaultPageSize","defaultCurrent","pageSizeOptions","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5fbef357.chunk.js","sourcesContent":["import React from 'react';\r\nimport './spinner.css'\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className=\"spinner\">\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Spinner\r\n","import React, { useState } from 'react';\r\nimport Modal from 'react-modal';\r\nimport './modal.css';\r\nimport Spinner from '../../spinner/spinner'\r\nModal.setAppElement(\"#root\");\r\n\r\nconst customStyle = {\r\n    overlay: {\r\n        backgroundColor: 'gray',\r\n        zIndex: 100,\r\n\r\n    },\r\n    content: {\r\n        top: \"10%\",\r\n        left: \"40px\",\r\n        right: \"40px\",\r\n        bottom: \"50px\",\r\n        border: \"1px solid rgb(204, 204, 204)\",\r\n        background: \"rgb(255, 255, 255)\",\r\n        overflow: \"hidden\",\r\n        borderadius: \"4px\",\r\n        outline: \"none\",\r\n        padding: \"20px\",\r\n    }\r\n\r\n}\r\n\r\nconst UploadModal = (props) => {\r\n    const [stateModal, setstateModal] = useState(true);\r\n    const [htmlFind, sethtmlFind] = useState(false)\r\n    const [iframeClass, setiframeClass] = useState('');\r\n    const [loading, setloading] = useState(true)\r\n\r\n    let iframeRef = null;\r\n\r\n\r\n    const render = () => {\r\n        if (props.children && props.children['href']) {\r\n            let { href } = props.children;\r\n            if (!htmlFind) {\r\n                sethtmlFind(true)\r\n                if (href === 'results/Zip.html') {\r\n                    setiframeClass('map')\r\n                } else {\r\n                    setiframeClass('html');\r\n                }\r\n            }\r\n            return href;\r\n        }\r\n        let imgSrc = props.children.src;\r\n        if (props.children && imgSrc) {\r\n            if (!htmlFind) {\r\n                sethtmlFind(true);\r\n                setiframeClass('img');\r\n            }\r\n            return imgSrc;\r\n\r\n        }\r\n    }\r\n    let styleFunction = () => {\r\n        let iframeBody = iframeRef.contentWindow.document.querySelector('body');\r\n        iframeBody.className = 'body';\r\n        setloading(false)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal style={customStyle} isOpen={stateModal} shouldCloseOnOverlayClick onRequestClose={() => { setstateModal(false); props.close() }}>\r\n                <div className='childContent'>\r\n                    <iframe\r\n                        ref={(iframe) => iframeRef = iframe}\r\n                        src={render()}\r\n                        title=\"Detailed View\"\r\n                        className={iframeClass}\r\n                        allowFullScreen={true}\r\n                        allowpaymentrequest={\"true\"}\r\n                        style={{ transform: \"scale(1)\" }}\r\n                        onLoad={styleFunction}\r\n                    > </iframe>\r\n                    {loading ? <Spinner /> : ''}\r\n\r\n                </div>\r\n                <button className={\"buttonClose\"} onClick={() => { setstateModal(false); props.close() }}>x</button>\r\n            </Modal>\r\n        </>\r\n    )\r\n};\r\nexport default UploadModal;\r\n\r\n\r\n","import React from 'react';\r\nimport { ResponsiveBar } from '@nivo/bar'\r\nimport './chart.css'\r\n// make sure parent container have a defined height when using\r\n// responsive component, otherwise height will be 0 and\r\n// no chart will be rendered.\r\n// website examples showcase many properties,\r\n// you'll often use just a few of them.\r\nconst MyResponsiveBar = (props) => {\r\n    // console.log(props.data, 'props data',Object.keys(props.data[0]))\r\n    return (\r\n        <div className='chart'>\r\n           \r\n            <ResponsiveBar\r\n                data={props.data}\r\n                keys={Object.keys(props.data[0])}\r\n                indexBy=\"Row\"\r\n                margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n                minValue={-100}\r\n                padding={0}\r\n                innerPadding={0}\r\n                groupMode=\"grouped\"\r\n                colors={{ scheme: 'nivo' }}\r\n                borderWidth={1}\r\n\r\n                \r\n                borderColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n                axisTop={null}\r\n                axisRight={null}\r\n                axisBottom={{\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n                    legend: 'Row',\r\n                    legendPosition: 'middle',\r\n                    legendOffset: 32\r\n                }}\r\n                axisLeft={{\r\n                    tickSize: 5,\r\n                    tickPadding: 5,\r\n                    tickRotation: 0,\r\n\r\n                    legendPosition: 'middle',\r\n                    legendOffset: -40\r\n                }}\r\n                labelSkipWidth={12}\r\n                labelSkipHeight={12}\r\n                labelTextColor={{ from: 'color', modifiers: [['darker', 1.6]] }}\r\n                legends={[\r\n                    {\r\n                        dataFrom: 'keys',\r\n                        anchor: 'bottom-right',\r\n                        direction: 'column',\r\n                        justify: false,\r\n                        translateX: 120,\r\n                        translateY: 0,\r\n                        itemsSpacing: 2,\r\n                        itemWidth: 100,\r\n                        itemHeight: 20,\r\n                        itemDirection: 'left-to-right',\r\n                        itemOpacity: 0.85,\r\n                        symbolSize: 20,\r\n                        effects: [\r\n                            {\r\n                                on: 'hover',\r\n                                style: {\r\n                                    itemOpacity: 1\r\n                                }\r\n                            }\r\n                        ]\r\n                    }\r\n                ]}\r\n                animate={true}\r\n                motionStiffness={90}\r\n                motionDamping={15}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default MyResponsiveBar;","import React, { Component } from 'react'\r\nimport { CSVReader } from 'react-papaparse';\r\nimport './uploader.css';\r\nimport parse from 'html-react-parser';\r\nimport Modal from './modalComponent/modal';\r\nimport { Pagination } from 'antd';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport MyResponsiveBar from '../chart/chart';\r\n\r\n\r\nexport default class Uploader extends Component {\r\n    state = {\r\n        csvCollection: '',\r\n        singleImageSource: '',\r\n        filesPerPage: 10,\r\n        currentPageNo: 1,\r\n        topList: '',\r\n        currentPost: '',\r\n        chart: false,\r\n        highlighCode: false,\r\n        titleName: ''\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (prevState.top !== this.state.topList) {\r\n            this.renderTableHeadData();\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //csv file drop handler\r\n    handleOnDrop = (data) => {\r\n        this.setState({\r\n            csvCollection: data,\r\n            loading: ''\r\n        })\r\n\r\n    }\r\n    //pagenumber and  post per page functionality \r\n\r\n    pageNumberHandler = () => {\r\n        let [...data] = this.state.csvCollection;\r\n        let remainData;\r\n        remainData = data.slice(3)\r\n        if (this.state.topList) {\r\n            remainData = data.slice(2)\r\n\r\n        }\r\n        let { filesPerPage, currentPageNo } = this.state;\r\n\r\n\r\n        let indexOfFirstFile, indexOfLastFile, currentPost;\r\n        indexOfLastFile = filesPerPage * currentPageNo;\r\n        indexOfFirstFile = indexOfLastFile - filesPerPage;\r\n        currentPost = remainData.slice(indexOfFirstFile, indexOfLastFile)\r\n        return currentPost\r\n    }\r\n\r\n    //table body data functionality\r\n\r\n    renderTableBodyData = () => {\r\n\r\n        let currentPost = this.pageNumberHandler()\r\n\r\n        //loop through the all incoming data and render the table formats \r\n        return currentPost.map((data, index) => {\r\n            return (\r\n                <tr key={`outerBody${index}`}>\r\n                    {data.data.map((bodyValues, index) => {\r\n                        if (parse(bodyValues).props && parse(bodyValues).props.children && this.state.highlighCode === false) {\r\n                            return <td key={`innerBody${index}`} > {(parse(bodyValues).props.children)} </td>\r\n                        }\r\n                        if (parse(bodyValues).props && parse(bodyValues).props.children && this.state.highlighCode === true) {\r\n                            return <td key={`innerBody${index}`} > {parse(bodyValues)} </td>\r\n                        }\r\n                        return <td key={`innerBody${index}`} > {(bodyValues)} </td>\r\n                    })}\r\n                </tr>\r\n            )\r\n        })\r\n    }\r\n    // table head data\r\n    renderTableHeadData = () => {\r\n        let [...head] = this.state.csvCollection;\r\n        let topRows = head.slice(0, 3);\r\n        let determineRows\r\n        if (topRows && topRows[2] && topRows[2]['data']) {\r\n            determineRows = topRows[2]['data'];\r\n            if (!determineRows.every((dat) => (/<\\/?[a-z][\\s\\S]*>/i.test(dat)))) {\r\n                topRows = head.slice(0, 2)\r\n                if (!this.state.topList) {\r\n                    this.setState({ topList: true })\r\n                }\r\n            }\r\n        }\r\n        return topRows.map((data, index) => {\r\n            return (\r\n                <tr key={`outerHead${index}`}>\r\n                    {data.data.map((innerData, indes) => {\r\n                        if (/<\\/?[a-z][\\s\\S]*>/i.test(innerData)) {\r\n                            return (\r\n                                <td\r\n                                    key={uuidv4()}\r\n                                    onClick={e => {\r\n                                        e.preventDefault();\r\n                                        let { props } = Object.assign({}, parse(innerData));\r\n                                        this.openModal(props);\r\n                                    }}\r\n                                >\r\n                                    {parse(innerData)}\r\n                                </td>\r\n                            );\r\n                        }\r\n                        return <td key={uuidv4()}>{innerData}</td>\r\n                    })}\r\n                </tr>\r\n            )\r\n        })\r\n\r\n    }\r\n\r\n    //csv file error hadler\r\n    handleOnError = (err, file, inputElem, reason) => {\r\n        console.log(err)\r\n    }\r\n\r\n    // csv file remove \r\n    handleOnRemoveFile = (data) => {\r\n        console.log(data, 'removed')\r\n        this.setState({\r\n            csvCollection: '',\r\n            topList: false\r\n\r\n        })\r\n    }\r\n\r\n    //modal open handler functionality\r\n    openModal = (openModal) => {\r\n        if ((openModal && openModal.src) || (openModal && openModal.href)) {\r\n            this.setState({\r\n                singleImageSource: openModal\r\n            })\r\n        }\r\n\r\n    }\r\n    //modal close fucntionality\r\n    closeModal = () => {\r\n        this.setState({\r\n            singleImageSource: ''\r\n        })\r\n    }\r\n\r\n    //pagination handler \r\n    paginationHanlder = (page, pageSize) => {\r\n        this.setState({\r\n            filesPerPage: pageSize,\r\n            currentPageNo: page\r\n        })\r\n    }\r\n\r\n    //chart data functionality\r\n    chartDataFunctionality = () => {\r\n        const title = this.state.csvCollection\r\n\r\n        let currentPost = this.pageNumberHandler()\r\n        let chart = this.chardHanler(currentPost, title);\r\n\r\n        let allowedField = [\r\n            'Term',\r\n            'NoEmp',\r\n            'NewExist',\r\n            'CreateJob',\r\n            'RetainedJob',\r\n            'UrbanRural',\r\n            'DisbursementGross',\r\n            'BalanceGross',\r\n            'ChgOffPrinGr',\r\n            'GrAppv',\r\n            'SBA_Appv',\r\n            'daysterm'\r\n        ]\r\n        let filterChart = [...chart]\r\n        filterChart.map((val, ind) => {\r\n            for (let key in filterChart[ind]) {\r\n                if (allowedField.indexOf(key) === -1) {\r\n                    delete filterChart[ind][key];\r\n                }\r\n            }\r\n        })\r\n        let chartCheck = filterChart[0];\r\n        let dataCheck = allowedField[0]\r\n\r\n        let filteredChartData = filterChart.map((filterCharData, index) => {\r\n            if (chartCheck[dataCheck]) {\r\n\r\n                return { ...filterCharData, Row: `Row ${index + 1}` }\r\n            }\r\n            return;\r\n\r\n        })\r\n\r\n        if (filteredChartData[0] !== undefined) {\r\n            return <MyResponsiveBar data={filteredChartData} />\r\n        }\r\n        return <h2 className='noData'>There is no chart data here</h2>\r\n\r\n\r\n    }\r\n\r\n    //table chart handler\r\n    chardHanler = (data, title) => {\r\n\r\n        return data.map((val, index) => {\r\n\r\n            let object = Object.assign({}, val.data);\r\n            let obj = {}\r\n            let finalValue = Object.values(object).map((v, index) => {\r\n                if (!isNaN(v) && !undefined && (v < 100000)) {\r\n                    let dataTitle = title[0]['data'][index];\r\n                    if ((v >= 3000)) {\r\n                        let convertOnePer = (v * 0.01);\r\n                        let values = parseFloat(convertOnePer);\r\n                        return obj[dataTitle] = values;\r\n                    }\r\n                    let values = parseFloat(v)\r\n                    return obj[dataTitle] = values;\r\n\r\n                }\r\n            });\r\n\r\n\r\n            return obj;\r\n        })\r\n    }\r\n    render() {\r\n        //button dynamic classes\r\n        let chartClass = this.state.chart ? 'chartRed' : 'chartGreen';\r\n        let codeHighLightClass = this.state.highlighCode ? 'DisableHightlight' : 'EnableHighlight';\r\n        return (<div className='uploader'>\r\n            <div className='uploaderCard' >\r\n                <CSVReader\r\n                    onDrop={this.handleOnDrop}\r\n                    onError={this.handleOnError}\r\n                    addRemoveButton\r\n                    onRemoveFile={this.handleOnRemoveFile}\r\n                >\r\n                    <span>Click (Drop) Upload  Your  file</span>\r\n                </CSVReader>\r\n            </div>\r\n            {this.state.csvCollection && <div>\r\n                <button onClick={() => this.setState({ chart: !this.state.chart })} className={`Btn ${chartClass}`} >\r\n                    {this.state.chart ? \"Hide Chart\" : \"Show Chart\"}\r\n                </button>\r\n                {this.state.chart ? this.chartDataFunctionality() : ''}\r\n\r\n            </div>}\r\n            {this.state.csvCollection && <div className='pagination'>\r\n                <Pagination\r\n                    total={this.state.csvCollection.length}\r\n                    showTotal={(total, range) => `${range[0]}-${range[1]} of ${total} items`}\r\n                    defaultPageSize={10}\r\n                    defaultCurrent={1}\r\n                    pageSizeOptions={[\"10\", \"25\", \"50\", \"100\", \"500\"]}\r\n                    onChange={(page, pageSize) => this.paginationHanlder(page, pageSize)}\r\n                />\r\n                <button onClick={() => this.setState({ highlighCode: !this.state.highlighCode })}\r\n                    className={`Btn clrbtn ${codeHighLightClass}`}>\r\n                    {this.state.highlighCode ? 'Disable Hightlight' : \"Hightlight Data\"}\r\n                </button>\r\n            </div>}\r\n            <div className='tableData' key={\"table\"}>\r\n                {this.state.csvCollection && (\r\n\r\n                        <table className='table'>\r\n                            <thead key={'theadHead'}>\r\n                                {this.renderTableHeadData()}\r\n                            </thead>\r\n                            <tbody key={\"theadBody\"}>\r\n                                {this.renderTableBodyData()}\r\n                            </tbody>\r\n                        </table>\r\n                )}\r\n            </div>\r\n            {this.state.singleImageSource ? <Modal close={this.closeModal}>{(this.state.singleImageSource)}</Modal> : ''}\r\n        </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Uploader from './uploadeComponent/upload'\r\nimport MyResponsiveBar from './chart/chart'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      {/* <MyResponsiveBar /> */}\r\n      <Uploader />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'antd/dist/antd.css'; \r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}